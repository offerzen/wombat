# This can be used to redeploy after rollback as it re-uses already scraped assets. It targets a specific site / project only
name: Deploy <site> without scraping

on:
  workflow_dispatch:

jobs:
  build:
    env:
      SITE: ${{ github.event.client_payload.site }} # Replace with actual webflow site url if this isn't triggered by webhook
      NODE_ENV: production
      CDN_URL: ${{ secrets.CDN_URL }}
      WEBFLOW_CDN_URL: https://assets.website-files.com/
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PREVIEW_DOMAIN: ${{ secrets.CDN_URL }}

    runs-on: ubuntu-latest
    timeout-minutes: 7
    steps:

      - uses: actions/checkout@v2
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # yarn caching
      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        run: |
          yarn build
          echo "SITE_PATH=$(echo "${{ env.SITE }}" | sed -e 's/https:\/\///g' -e 's:/*$::')" >> $GITHUB_ENV

      - name: Upload transformed sites
        uses: actions/upload-artifact@v2
        with:
          name: static-files
          path: static/
          retention-days: 1

      - name: Send slack notification
        if: failure()
        run: |
          curl -X POST -H "Content-type: application/json" --data '{"text": "<!channel> Production Deploy failed: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}?check_suite_focus=true"}' ${{ secrets.SLACK_HOOK }}


      - name: Send preview url notification
        if: success()
        run: |
          curl -X POST -H "Content-type: application/json" --data '{"text": "Production Deployed: ${{ env.PREVIEW_DOMAIN }}${{ env.SITE_PATH }}"}' ${{ secrets.SLACK_HOOK }}

  deploy-production:
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 6

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set shared environment variables
        uses: offerzen/action-env-vars-from-ssm@v1
        with:
          path: '/shared/'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ORG_AWS_ACCESS_KEY_ID_GHA }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY_GHA }}
          AWS_DEFAULT_REGION: ${{ secrets.ORG_AWS_REGION }}
          AWS_ROLE_ARN: ${{ secrets.ORG_AWS_ROLE_ARN_GHA_PRODUCTION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ORG_AWS_ACCESS_KEY_ID_GHA }}
          aws-secret-access-key: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY_GHA }}
          aws-region: ${{ secrets.ORG_AWS_REGION }}
          role-to-assume: ${{ secrets.ORG_AWS_ROLE_ARN_GHA_PRODUCTION }}
          role-duration-seconds: 900

      - name: Download transformed sites
        uses: actions/download-artifact@v2
        with:
          name: static-files
          path: static/

      - name: Upload build to S3 bucket
        env:
          S3_DEPLOY_PATH: "s3://$S3_BUCKET_NAME_CDN/${{ github.event.repository.id }}"
        run: |
          echo "Uploading non-HTML files to ${{ env.S3_DEPLOY_PATH }}"
          aws s3 sync --no-progress --exclude *.html static/ ${{ env.S3_DEPLOY_PATH }}
          echo
          echo "Uploading HTML files to S3 with 'cache-control:no-cache' header..."
          aws s3 sync --no-progress --include *.html --content-type "text/html;charset=utf-8" --cache-control no-cache static/ ${{ env.S3_DEPLOY_PATH }}
