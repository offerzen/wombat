name: Publish

on:
  workflow_dispatch:
  repository_dispatch:
    types: [publish_webflow]

jobs:
  publish-target:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    env:
      SITE: ${{ github.event.client_payload.site }}
    outputs:
      site: ${{ steps.regex-match.outputs.match }}
    steps:
      - uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.event.client_payload.site }}
          regex: '[a-z_\-]+\.offerzen\.com'

  scrape:
    needs: [publish-target]
    if: ${{ needs.publish-target.outputs.site != '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      NODE_ENV: test
      SITE: ${{ needs.publish-target.outputs.site }}
      CDN_URL: ${{ secrets.CDN_URL }}
      WEBFLOW_CDN_URL: https://assets.website-files.com/
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BRANCH_NAME: test

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      # yarn caching
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        run: |
          yarn

      - name: Run scraper
        run: |
          yarn scrape

      - name: Send slack notification
        if: failure()
        run: |
          curl -X POST -H "Content-type: application/json" --data '{"text": "<!channel> Scraper failed for ${{ env.SITE }}"}' ${{ secrets.SLACK_HOOK }}

      - name: Setup branch
        id: branch
        run: |
          echo "SITE_PATH=$(echo "${{ env.SITE }}" | sed -e 's/https:\/\///g' -e 's:/*$::')" >> $GITHUB_ENV
          echo "BRANCH_NAME=automatic/$(date '+%s')" >> $GITHUB_ENV

      - name: Create branch
        run: |
          git checkout -b ${{ env.BRANCH_NAME }}

      - name: Commit and push
        uses: actions-js/push@v1.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: 'Automatic: scrape'
          branch: ${{ env.BRANCH_NAME }}

      - name: Actually push
        run: |
          git push -u origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        id: cpr
        run: |
          echo "PULL_REQUEST_URL=$(gh pr create --base master --title 'Webflow publish for ${{ env.SITE_PATH }}' --body 'Automatic: Webflow publish')" >> $GITHUB_ENV

      - name: Run test
        id: test
        run: |
          SITE=${{ env.SITE }} yarn test

      - name: Send slack notification
        if: failure()
        run: |
          curl -X POST -H "Content-type: application/json" --data '{"text": "<!channel> Tests failed for ${{ env.SITE }}: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}?check_suite_focus=true"}' ${{ secrets.SLACK_HOOK }}

      - name: Send slack notification
        if: success()
        run: |
          curl -X POST -H "Content-type: application/json" --data '{"text": "Tests successful for ${{ env.SITE_PATH }}"}' ${{ secrets.SLACK_HOOK }}

      - name: Auto merge PR
        id: automerge
        run: |
          gh pr merge ${{ env.PULL_REQUEST_URL }} --delete-branch --auto --merge

      - name: feedback
        run: |
          curl -X POST -H "Content-type: application/json" --data '{"text": "Pull request: ${{ env.PULL_REQUEST_URL }}"}' ${{ secrets.SLACK_HOOK }}

  build:
    needs: [publish-target,scrape]
    env:
      SITE: ${{ needs.publish-target.outputs.site }}
      NODE_ENV: production
      CDN_URL: ${{ secrets.CDN_URL }}
      WEBFLOW_CDN_URL: https://assets.website-files.com/
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PREVIEW_DOMAIN: ${{ secrets.PREVIEW_DOMAIN }}

    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:

      - uses: actions/checkout@v4
        with:
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # yarn caching
      - uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        run: |
          yarn build
          echo "SITE_PATH=$(echo "${{ env.SITE }}" | sed -e 's/https:\/\///g' -e 's:/*$::')" >> $GITHUB_ENV

      - name: Upload transformed sites
        uses: actions/upload-artifact@v4
        with:
          name: static-files
          path: static/
          retention-days: 1

      - name: Send slack notification
        if: failure()
        run: |
          curl -X POST -H "Content-type: application/json" --data '{"text": "<!channel> Production Deploy failed: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}?check_suite_focus=true"}' ${{ secrets.SLACK_HOOK }}


      - name: Send preview url notification
        if: success()
        run: |
          curl -X POST -H "Content-type: application/json" --data '{"text": "Production Deployed: ${{ env.PREVIEW_DOMAIN }}${{ env.SITE_PATH }}"}' ${{ secrets.SLACK_HOOK }}

  deploy-staging:
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set shared environment variables
        uses: offerzen/action-env-vars-from-ssm@v1
        with:
          path: '/shared/'
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.ORG_AWS_ACCESS_KEY_ID_GHA }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY_GHA }}
          AWS_DEFAULT_REGION: ${{ secrets.ORG_AWS_REGION }}
          AWS_ROLE_ARN: ${{ vars.ORG_AWS_ROLE_ARN_GHA_STAGING }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.ORG_AWS_ACCESS_KEY_ID_GHA }}
          aws-secret-access-key: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY_GHA }}
          aws-region: ${{ secrets.ORG_AWS_REGION }}
          role-to-assume: ${{ vars.ORG_AWS_ROLE_ARN_GHA_STAGING }}
          role-duration-seconds: 900

      - name: Download transformed sites
        uses: actions/download-artifact@v4
        with:
          name: static-files
          path: static/

      - name: Upload build to S3 bucket
        env:
          S3_DEPLOY_PATH: "s3://$S3_BUCKET_NAME_CDN/${{ github.event.repository.id }}"
        run: |
          echo "Uploading non-HTML files to ${{ env.S3_DEPLOY_PATH }}"
          aws s3 sync --no-progress --exclude *.html static/ ${{ env.S3_DEPLOY_PATH }}
          echo
          echo "Uploading HTML files to S3 with 'cache-control:no-cache' header..."
          aws s3 sync --no-progress --include *.html --content-type "text/html;charset=utf-8" --cache-control no-cache static/ ${{ env.S3_DEPLOY_PATH }}

  deploy-production:
    needs: [build]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set shared environment variables
        uses: offerzen/action-env-vars-from-ssm@v1
        with:
          path: '/shared/'
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.ORG_AWS_ACCESS_KEY_ID_GHA }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY_GHA }}
          AWS_DEFAULT_REGION: ${{ secrets.ORG_AWS_REGION }}
          AWS_ROLE_ARN: ${{ vars.ORG_AWS_ROLE_ARN_GHA_PRODUCTION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.ORG_AWS_ACCESS_KEY_ID_GHA }}
          aws-secret-access-key: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY_GHA }}
          aws-region: ${{ secrets.ORG_AWS_REGION }}
          role-to-assume: ${{ vars.ORG_AWS_ROLE_ARN_GHA_PRODUCTION }}
          role-duration-seconds: 900

      - name: Download transformed sites
        uses: actions/download-artifact@v4
        with:
          name: static-files
          path: static/

      - name: Upload build to S3 bucket
        env:
          S3_DEPLOY_PATH: "s3://$S3_BUCKET_NAME_CDN/${{ github.event.repository.id }}"
        run: |
          echo "Uploading non-HTML files to ${{ env.S3_DEPLOY_PATH }}"
          aws s3 sync --no-progress --exclude *.html static/ ${{ env.S3_DEPLOY_PATH }}
          echo
          echo "Uploading HTML files to S3 with 'cache-control:no-cache' header..."
          aws s3 sync --no-progress --include *.html --content-type "text/html;charset=utf-8" --cache-control no-cache static/ ${{ env.S3_DEPLOY_PATH }}
